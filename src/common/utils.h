#ifndef UTILS_H
#define UTILS_H

#include <string>

namespace mapreduce {

constexpr size_t FILE_HASH_LENGTH = 16;

using key_t = std::string;
using val_t = std::string;

/**
 * Splits a file into multiple files of aprroximately a given size.
 * Idividual lines are not split. The last file may be significantly smaller
 * than the given size. Returns the number of files created.
 */
size_t split_file_bytes(std::string const& filepath, size_t part_size_bytes);

/**
 * Checks if a filepath has a valid format.
 * For now, this means that the filepath ends with ".txt".
 */
bool has_valid_format(std::string const& filepath);

/**
 * Checks if a filepath exists and is executable.
 */
bool is_executable(std::string const& filepath);

/**
 * Checks if a filepath exists and is executable.
 * Throws an exception if the filepath is not executable.
 */
void validate_executable(std::string const& filepath);

/**
 * Returns a random string of length FILE_HASH_LENGTH.
 */
std::string get_random_string();

/**
 * Appends a string to a filepath, separated by '-', and keeping '.txt' at the
 * end. Generally, filepaths should be in format
 * <filepath>-<primary_index>-<group_index>-<secondary_index>.txt Primary index
 * is generally the id of the virtual worker that processed this task. Secondary
 * index is used only to split files by keys betweem mappers and reducers.
 */
std::string combine_filepath(std::string const& filepath, std::string str);

/**
 * Same as above, but shortcut for appending an integer.
 */
std::string combine_filepath(std::string const& filepath, uint32_t idx);

/**
 * Returns original filepath from a filepath generated by combine_filepath with
 * hash generated by get_random_string().
 */
std::string unhash_filepath(std::string const& filepath);

} // mapreduce

#endif // UTILS_H